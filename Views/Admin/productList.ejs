<style>
 /* Products Page Specific Styles */
.products-container,
.add-product-container {
    padding: 20px;
    overflow-y: auto;
    flex: 1;
}

.products-header,
.add-product-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap;
    gap: 15px;
}

.products-actions,
.add-product-actions {
    display: flex;
    align-items: center;
    gap: 15px;
}

.search-box {
    display: flex;
    align-items: center;
    background-color: var(--card-bg);
    border-radius: 5px;
    padding: 5px 10px;
    width: 300px;
}

.search-box input {
    background: none;
    border: none;
    color: var(--text-color);
    padding: 8px;
    width: 100%;
    outline: none;
}

.add-product-btn {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    text-decoration: none;
    transition: background-color 0.3s;
}

.add-product-btn:hover {
    background-color: var(--primary-dark);
}

/* Products Table */
.products-table-container {
    background-color: var(--card-bg);
    border-radius: 10px;
    overflow-x: auto;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

.products-table {
    width: 100%;
    border-collapse: collapse;
    min-width: 1200px;
}

.products-table th,
.products-table td {
    padding: 15px;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

.products-table th {
    background-color: rgba(255, 140, 0, 0.1);
    color: var(--primary-color);
    font-weight: 600;
    position: sticky;
    top: 0;
    z-index: 10;
}

.products-table tbody tr:hover {
    background-color: rgba(255, 140, 0, 0.05);
}

.products-table tbody tr:last-child td {
    border-bottom: none;
}

.product-image {
    width: 50px;
    height: 50px;
    border-radius: 5px;
    object-fit: cover;
}

.product-status {
    display: inline-block;
    padding: 5px 10px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
}

.status-active {
    background-color: rgba(72, 187, 120, 0.2);
    color: var(--success-color);
    padding: 4px;
    border: 1px solid;
    border-radius: 0.30rem;
    font-weight: 500;
}

.status-Blocked {
    background-color: rgba(245, 101, 101, 0.2);
    color: var(--danger-color);
    padding: 4px;
    border: 1px solid;
    border-radius: 0.30rem;
    font-weight: 500;
}

.status-draft {
    background-color: rgba(237, 137, 54, 0.2);
    color: var(--warning-color);
}

.product-actions {
    display: flex;
    gap: 8px;
}

.edit-btn,
.block-btn,
.unblock-btn {
    padding: 6px 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 5px;
    transition: all 0.3s ease;
}

.edit-btn {
    background-color: rgba(66, 153, 225, 0.2);
    color: var(--info-color);
    width: 85px;
    border: 2px solid 
}

.edit-btn:hover {
    background-color: var(--info-color);
    color: white;
}

.block-btn {
    background-color: rgba(245, 101, 101, 0.2);
    color: var(--danger-color);
}

.block-btn:hover {
    background-color: var(--danger-color);
    color: white;
}

.unblock-btn {
    background-color: rgba(72, 187, 120, 0.2);
    color: var(--success-color);
}

.unblock-btn:hover {
    background-color: var(--success-color);
    color: white;
}

/* Pagination */
.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
    gap: 10px;
}

.pagination-btn {
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    color: var(--text-color);
    padding: 8px 15px;
    border-radius: 5px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
    transition: all 0.3s ease;
}

.pagination-btn:hover:not(:disabled) {
    background-color: var(--primary-color);
    color: white;
}

.pagination-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.page-numbers {
    display: flex;
    gap: 5px;
}

.page-number {
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    color: var(--text-color);
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.page-number:hover {
    background-color: rgba(255, 140, 0, 0.1);
    color: var(--primary-color);
}

.page-number.active {
    background-color: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
}

/* Add Product Form Styles */
.add-product-form {
    margin-top: 20px;
}

.form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
}

.form-card {
    background-color: var(--card-bg);
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.form-card h3 {
    margin-bottom: 15px;
    font-size: 18px;
    color: var(--primary-color);
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 10px;
}

.form-group {
    margin-bottom: 15px;
}

.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
}

.form-group input[type="text"],
.form-group input[type="number"],
.form-group select,
.form-group textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    background-color: var(--darker-bg);
    color: var(--text-color);
    font-size: 14px;
}

.form-group input[type="text"]:focus,
.form-group input[type="number"]:focus,
.form-group select:focus,
.form-group textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(255, 140, 0, 0.2);
}

.form-help-text {
    font-size: 12px;
    color: var(--text-muted);
    margin-bottom: 15px;
}

/* Image Upload Styles */
.image-upload-container {
    margin-top: 15px;
}

.image-upload-area {
    border: 2px dashed var(--border-color);
    border-radius: 10px;
    padding: 30px;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    margin-bottom: 15px;
}

.image-upload-area:hover {
    border-color: var(--primary-color);
    background-color: rgba(255, 140, 0, 0.05);
}

.image-upload-placeholder {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
}

.image-upload-placeholder i {
    font-size: 40px;
    color: var(--primary-color);
}

.image-upload-placeholder p {
    font-size: 16px;
    font-weight: 500;
}

.image-upload-placeholder span {
    font-size: 12px;
    color: var(--text-muted);
}

.image-upload-input {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    cursor: pointer;
}

.image-preview-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 10px;
    margin-top: 15px;
}

.image-preview {
    position: relative;
    border-radius: 5px;
    overflow: hidden;
    aspect-ratio: 1;
}

.image-preview img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.image-preview .remove-image {
    position: absolute;
    top: 5px;
    right: 5px;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.image-preview:hover .remove-image {
    opacity: 1;
}

/* Price Input Styles */
.price-input {
    position: relative;
}

.currency-symbol {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-muted);
}

.price-input input {
    padding-left: 25px !important;
}

/* Toggle Switch */
.toggle-switch {
    display: inline-block;
    position: relative;
}

.toggle-input {
    display: none;
}

.toggle-label {
    display: block;
    width: 48px;
    height: 24px;
    border-radius: 12px;
    background-color: var(--border-color);
    cursor: pointer;
    position: relative;
    transition: background-color 0.3s ease;
}

.toggle-label::after {
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background-color: white;
    transition: transform 0.3s ease;
}

.toggle-input:checked + .toggle-label {
    background-color: var(--primary-color);
}

.toggle-input:checked + .toggle-label::after {
    transform: translateX(24px);
}

/* Checkbox Styles */
.checkbox-group {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 10px;
}

.checkbox-item {
    display: flex;
    align-items: center;
    gap: 8px;
}

.checkbox-item input[type="checkbox"] {
    width: 16px;
    height: 16px;
    accent-color: var(--primary-color);
}

/* Form Actions */
.form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 20px;
}

.cancel-btn,
.save-draft-btn,
.publish-btn,
.submit-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.3s ease;
}

.cancel-btn {
    background-color: transparent;
    border: 1px solid var(--border-color);
    color: var(--text-color);
}

.cancel-btn:hover {
    background-color: var(--border-color);
}

.save-draft-btn {
    background-color: transparent;
    border: 1px solid var(--primary-color);
    color: var(--primary-color);
}

.save-draft-btn:hover {
    background-color: rgba(255, 140, 0, 0.1);
}

.publish-btn,
.submit-btn {
    background-color: var(--primary-color);
    color: white;
}

.publish-btn:hover,
.submit-btn:hover {
    background-color: var(--primary-dark);
}

.btn {
  padding: 0.495rem 0.65rem;
  border-radius: 0.25rem;
  border: 1px solid transparent;
  display: inline-flex;
  align-items: center;
  gap: 0.25rem;
}


.unlist-btn{
    background-color: #ef2438;
    border: 2px solid #c82333;
    color: #ffffff;
}
.unlist-btn:hover {
  background-color: #d89da3;
  color: #3e3b3b;
}

.list-btn-green{
    background-color: #299a49;
    border: 2px solid #1b630b;
    color: #ffffff;
    width: 85px;
    padding: 11px 17px 7px 20px;
    font-weight: 400;
    font-size: 0.9rem;

}
.list-btn-green:hover {
  background-color: #218838;
  color: #3e3b3b;
}
.brand-logo{
    width:70px;
    height:60px;
    border-radius: 3px;
    border: 2px solid #f16304;
}

.action-btn + .edit-btn {
  margin-top: 10px; 
}
/* Responsive styles starts here*/
@media (max-width: 1024px) {
    .form-grid {
        grid-template-columns: 1fr;
    }
    
    .products-actions {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .search-box {
        width: 100%;
    }
    
    .add-product-btn {
        width: 100%;
        justify-content: center;
    }
}

@media (max-width: 768px) {
    .form-row {
        grid-template-columns: 1fr;
    }
    
    .add-product-header {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .add-product-actions {
        width: 100%;
        justify-content: space-between;
    }
}

    </style>
    
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

            <%-include("../../Views/Partials/Admin/header")%>
            <!-- Products Content -->
            <div class="products-container">
                <div class="products-header">
                    <h1>Products Management</h1>
                    <div class="products-actions">
                        <div class="search-box">
                            <input type="text" id="product-search" placeholder="Search products...">
                            <button class="search-btn"><i class="fas fa-search"></i></button>
                        </div>
                        <a href="/admin/addProduct" class="add-product-btn">
                            <i class="fas fa-plus"></i> Add Product
                        </a>
                    </div>
                </div>

                <div class="products-table-container">
                    <table class="products-table">
                        <thead>
                            <tr>
                                <th>SL No:</th>
                                <th>Image</th>
                                <th>Product Name</th>
                                <th>Description</th>
                                <th>Brand</th>
                                <th>Category</th>
                                <th>Edition</th>
                                <th>Scale</th>
                                <th>Price</th>
                                <th>Offer</th>
                                <th>Stock</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="products-table-body">
                        <!-- products will be rendered here dynamically by script here -->
                        </tbody>
                    </table>
                </div>

                <div class="pagination">
                    <button id="prev-page" class="pagination-btn" disabled><i class="fas fa-chevron-left"></i> Previous</button>
                    <div id="page-numbers" class="page-numbers">
                        <button class="page-number active">1</button>
                        <button class="page-number">2</button>
                        <button class="page-number">3</button>
                        <button class="page-number">4</button>
                    </div>
                    <button id="next-page" class="pagination-btn">Next <i class="fas fa-chevron-right"></i></button>
                </div>
            </div>
        </main>
    </div>

    <script src="./script.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
   
<script>
     function editProduct(productId) {
  window.location.href = `/admin/editProduct/${productId}`;
}
    
document.addEventListener("DOMContentLoaded", () => {
  let currentPage = 1;
  const productsPerPage = 6;
  let allProducts = []; //  this will hold all products
  let filteredProducts = [];

  renderProductList();

  async function renderProductList() {
    try {
      const response = await fetch('/admin/api/products');
      const data = await response.json();
      console.log("data", data);
      
      allProducts = data.Products; // store in global variable
      filteredProducts = [...allProducts]; // keep filtered copy

      renderPaginatedProducts();
    //   attachProductActionListeners();
      updatePagination();
      
    } catch (error) {
      console.error("Error loading product list:", error);
    }
  }

 
  function renderPaginatedProducts() {
    const tbody = document.getElementById("products-table-body");
    tbody.innerHTML = "";

    const startIndex = (currentPage - 1) * productsPerPage;
    const endIndex = startIndex + productsPerPage;
    const paginated = filteredProducts.slice(startIndex, endIndex);

    paginated.forEach((product, index) => {
      const row = document.createElement("tr");

      row.innerHTML = `
        <td>${startIndex + index + 1}</td>
        <td>
          <img src="${product.productImage?.[0]}" 
               alt="${product.productName}" 
               class="brand-logo">
        </td>
        <td>${product.productName}</td>
        <td>${product.description?.substring(0, 100) || ''}...</td>
        <td>${product.brand?.brandName || 'N/A'}</td>
        <td>${product.category?.name || 'N/A'}</td>
        <td>${product.edition || 'N/A'}</td>
        <td>${product.scale || 'N/A'}</td>
        <td>₹${product.salePrice}</td>
        <td>${product.productOffer}%</td>
        <td>${product.stock}</td>
        <td>
              <span class="status-badge ${product.isBlocked ? "status-blocked" : "status-active"}">
                ${product.isBlocked ? "Blocked" : "Active"}
              </span>  
        </td>
        
        <td class="action-cell">
          ${product.isBlocked
            ? `<button class="btn btn-success action-btn list-btn list-btn-green" data-id="${product._id}">
                    <i class="fas fa-check-circle"></i> LIST
                </button>`

            : `<button class="btn btn-danger action-btn list-btn unlist-btn" data-id="${product._id}">
                    <i class="fas fa-ban"></i> UNLIST
                </button>`
          }

          <button class="action-btn edit-btn" onclick="editProduct('${product._id}')">
            <span class="material-icons">edit</span> EDIT
          </button>
        
        </td>
      `;
      tbody.appendChild(row);
    });
  
    // -----------------------LIST & UNLIST PRODUCTS----------------

    function confirmUnlistProduct(productId, btn) {
        Swal.fire({
        title: "Are you sure?",
        text: "This product will be unlisted from the store.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, unlist it!"
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/unlist-product/${productId}`, {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json"
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire("Unlisted!", data.message, "success").then(() => {
                location.reload(); // or re-fetch product list
              });
            } else {
              Swal.fire("Failed!", data.message, "error");
            }
          })
          .catch(error => {
            console.error("Error:", error);
            Swal.fire("Error", "Something went wrong", "error");
          });
        }
      });
    }

    function confirmListProduct(productId, btn) {
        Swal.fire({
        title: "Are you sure?",
        text: "This product will be listed again in the store.",
        icon: "question",
        showCancelButton: true,
        confirmButtonColor: "#28a745",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, list it!"
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/list-product/${productId}`, {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json"
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire("Listed!", data.message, "success").then(() => {
                location.reload(); // or call renderProductList()
              });
            } else {
              Swal.fire("Failed!", data.message, "error");
            }
          })
          .catch(error => {
            console.error("Error:", error);
            Swal.fire("Error", "Something went wrong", "error");
          });
        }
      });
    }

// --------------------------------* END *-----------------------------

    // Add event listeners to UNLIST buttons
    document.querySelectorAll(".unlist-btn").forEach((btn) => {
      btn.addEventListener("click", function () {
        const productId = this.getAttribute("data-id");
        confirmUnlistProduct(productId, this);
      });
    });
    
    // Add event listeners to LIST buttons
    document.querySelectorAll(".list-btn-green").forEach((btn) => {
      btn.addEventListener("click", function () {
        const productId = this.getAttribute("data-id");
        confirmListProduct(productId, this);
      });
    });
        updatePagination();
  }


  function updatePagination() {
    const totalPages = Math.ceil(filteredProducts.length / productsPerPage);
    const pageNumbers = document.getElementById("page-numbers");
    const prevBtn = document.getElementById("prev-page");
    const nextBtn = document.getElementById("next-page");

    // Update prev/next buttons
     prevBtn.disabled = currentPage === 1;
     nextBtn.disabled = currentPage === totalPages;

    // Update page numbers
     pageNumbers.innerHTML = "";

    // Determine range of page numbers to show
     let startPage = Math.max(1, currentPage - 2);
     let endPage = Math.min(totalPages, startPage + 4)

     // Adjust if we're near the end
     if (endPage - startPage < 4) {
       startPage = Math.max(1, endPage - 4);
     }

    for (let i = startPage; i <= endPage; i++) {
      const pageBtn = document.createElement("button");
      pageBtn.className = `page-number ${i === currentPage ? "active" : ""}`;
      pageBtn.textContent = i;
      pageBtn.addEventListener("click", () => {
        currentPage = i;
        renderPaginatedProducts(); // call the correct call
        // attachProductActionListeners();
        updatePagination();
      });
      pageNumbers.appendChild(pageBtn);
    }

    // Optional: Next & Previous button functionality
    prevBtn.addEventListener("click", () => {
      if (currentPage > 1) {
        currentPage--;
        renderPaginatedProducts();
        // attachProductActionListeners();
        updatePagination();
      }
    });

    nextBtn.addEventListener("click", () => {
      if (currentPage < totalPages) {
        currentPage++;
        renderPaginatedProducts();
        // attachProductActionListeners();
        updatePagination();
      }
    });
  }
     // Search functionality
    const searchInput = document.getElementById("product-search");
        searchInput.addEventListener("input", function () {
          const searchTerm = this.value.toLowerCase().trim();
          applyFiltersAndSort(searchTerm);
        });

    function applyFiltersAndSort(searchTerm = searchInput.value.toLowerCase().trim()) {
          filteredProducts = allProducts.filter((product) => {
          const name = product.productName?.toLowerCase() || "";
          const brand = product.brand?.brandName?.toLowerCase() || "";
          const category = product.category?.categoryName?.toLowerCase() || "";
          const edition = product.edition?.toLowerCase() || "";
          const scale = product.scale?.toLowerCase() || "";
      
          return (
            name.includes(searchTerm) ||
            brand.includes(searchTerm) ||
            category.includes(searchTerm) ||
            edition.includes(searchTerm) ||
            scale.includes(searchTerm)
          );
        });
      
        // Reset to first page when filtering
        currentPage = 1;
        renderPaginatedProducts();
    }

   function editProduct(productId) {
  window.location.href = `/admin/editProduct/${productId}`;
}


  function confirmUnlistProduct(productId, btn) {
    console.log("Unlisting:", productId);
  }

  function confirmListProduct(productId, btn) {
    console.log("Listing:", productId);
  }
});
</script>

</body>
</html>