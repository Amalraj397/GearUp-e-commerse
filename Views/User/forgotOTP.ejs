<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>OTP Verification</title>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <style>
      body {
        font-family: Arial, sans-serif;
        background-color: #0d0c0c;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
      }

      .otp-container {
        background-color: #5e5d5d;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        width: 350px;
        text-align: center;
      }

      h2 {
        margin-top: 0;
        color: #e47107;
      }

      .otp-inputs {
        display: flex;
        justify-content: space-between;
        margin: 20px 0;
      }

      .otp-input {
        width: 50px;
        height: 50px;
        text-align: center;
        font-size: 20px;
        border: 1px solid #ed8208;
        border-radius: 4px;
        outline: none;
      }

      .otp-input:focus {
        border-color: #4caf50;
        box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
      }

      .otp-input.invalid {
        border-color: #f44336;
        animation: shake 0.5s;
      }

      @keyframes shake {
        0%,
        100% {
          transform: translateX(0);
        }
        20%,
        60% {
          transform: translateX(-5px);
        }
        40%,
        80% {
          transform: translateX(5px);
        }
      }

      .submit-btn {
        background-color: #4caf50;
        color: white;
        border: none;
        padding: 12px 20px;
        width: 100%;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 10px;
      }

      .submit-btn:hover {
        background-color: #45a049;
      }

      .submit-btn:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
      }

      .resend-section {
        margin-top: 20px;
        font-size: 14px;
        color: #131212;
      }

      .resend-btn {
        background: none;
        border: none;
        color: #277029;
        cursor: pointer;
        text-decoration: underline;
        font-size: 14px;
        padding: 0;
      }

      .resend-btn:hover {
        color: #00fa0d;
      }

      .resend-btn:disabled {
        color: #ccc;
        cursor: not-allowed;
        text-decoration: none;
      }

      .error-message {
        color: #f44336;
        font-size: 14px;
        margin-top: 5px;
        height: 20px;
      }

      .timer {
        color: #999;
        font-size: 13px;
      }

      .resend-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        margin-top: 5px;
      }
    </style>
  </head>
  <body>
    <div class="otp-container">
      <h2>OTP Verification</h2>
      <p>Enter the 6-digit code sent to your email</p>

      <div class="otp-inputs">
        <input
          type="text"
          class="otp-input"
          maxlength="1"
          data-index="0"
          inputmode="numeric"
        />
        <input
          type="text"
          class="otp-input"
          maxlength="1"
          data-index="1"
          inputmode="numeric"
        />
        <input
          type="text"
          class="otp-input"
          maxlength="1"
          data-index="2"
          inputmode="numeric"
        />
        <input
          type="text"
          class="otp-input"
          maxlength="1"
          data-index="3"
          inputmode="numeric"
        />
        <input
          type="text"
          class="otp-input"
          maxlength="1"
          data-index="4"
          inputmode="numeric"
        />
        <input
          type="text"
          class="otp-input"
          maxlength="1"
          data-index="5"
          inputmode="numeric"
        />
      </div>

      <div class="error-message" id="errorMsg"></div>
      <button class="submit-btn" id="submitBtn" disabled>Verify</button>

      <div class="resend-section">
        <span>Didn't get email?</span>
        <div class="resend-wrapper">
          <button class="resend-btn" id="resendBtn" disabled>Resend OTP</button>
          <span class="timer" id="timer">Resend in 90s</span>
        </div>
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const otpInputs = document.querySelectorAll(".otp-input");
        const submitBtn = document.getElementById("submitBtn");
        const resendBtn = document.getElementById("resendBtn");
        const errorMsg = document.getElementById("errorMsg");
        const timerDisplay = document.getElementById("timer");

        let countdown;

        function validateInput(input) {
          if (input.value && !/^[0-9]$/.test(input.value)) {
            input.value = "";
            input.classList.add("invalid");
            errorMsg.textContent = "Only numbers are allowed";
            setTimeout(() => {
              input.classList.remove("invalid");
              errorMsg.textContent = "";
            }, 1000);
            return false;
          }
          return true;
        }

        function checkOTPComplete() {
          const otp = Array.from(otpInputs)
            .map((input) => input.value)
            .join("");
          submitBtn.disabled = otp.length !== 6;
        }

        otpInputs.forEach((input, index) => {
          input.addEventListener("input", (e) => {
            if (!validateInput(e.target)) return;
            if (e.target.value.length === 1 && index < otpInputs.length - 1) {
              otpInputs[index + 1].focus();
            }
            checkOTPComplete();
          });

          input.addEventListener("paste", (e) => {
            e.preventDefault();
            const data = e.clipboardData.getData("text");
            if (/^[0-9]{6}$/.test(data)) {
              otpInputs.forEach(
                (input, idx) => (input.value = data.charAt(idx))
              );
              checkOTPComplete();
              submitBtn.focus();
            }
          });

          input.addEventListener("keydown", (e) => {
            if ([8, 9, 37, 39, 46].includes(e.keyCode)) return;
            if (e.key.length === 1 && !/[0-9]/.test(e.key)) {
              e.preventDefault();
              validateInput(e.target);
            }
          });

          input.addEventListener("keyup", (e) => {
            if (e.key === "Backspace" && !e.target.value && index > 0) {
              otpInputs[index - 1].focus();
            }
            checkOTPComplete();
          });
        });

        submitBtn.addEventListener("click", async () => {
          const otp = Array.from(otpInputs)
            .map((input) => input.value)
            .join("");
          if (otp.length === 6) {
            try {
              const response = await fetch("/forgotverifyOTP", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ otp }),
              });

              const data = await response.json();

              if (data.success) {
                Swal.fire({
                  title: data.message,
                  icon: "success",
                  confirmButtonColor: "#3085d6",
                  confirmButtonText: "Update Your new Password",
                }).then(() => {
                  // console.log("data.redirectUrl::", data.redirectUrl);    //debugging
                  window.location.href = data.redirectUrl;
                });
              } else {
                Swal.fire({
                  title: "Failed!",
                  text: data.message,
                  icon: "error",
                  confirmButtonColor: "#d33",
                  confirmButtonText: "Try Again",
                });
              }
            } catch (error) {
              console.log("Error verifying OTP:", error);
              Swal.fire({
                title: "Error",
                text: "Something went wrong. Please try again later.",
                icon: "error",
              });
            }
          }
        });

         let timer=60;
        

        function startResendCountdown(seconds) {
          resendBtn.disabled = true;
          timerDisplay.textContent = `Resend in ${seconds}s`;

          clearInterval(countdown);
          countdown = setInterval(() => {
            seconds--;
            window.sessionStorage.setItem("timer",seconds);
            if (seconds <= 0) {
              clearInterval(countdown);
              resendBtn.disabled = false;
              window.sessionStorage.removeItem("timer");
              timerDisplay.textContent = "";
            } else {
              timerDisplay.textContent = `Resend in ${seconds}s`;
            }
          }, 1000);
        }

        resendBtn.addEventListener("click", async (e) => {
          e.preventDefault();
          try {
            const response = await fetch("/forgotResendOtp", { method: "POST" });
            const data = await response.json();
            // alert(data.message);
            Toastify({
            text: data.message,
            duration: 3000,
            gravity: "top", 
            position: "right", // left, center or right
            backgroundColor: "#4CAF50", 
            stopOnFocus: true,
          }).showToast(); 

            startResendCountdown(sessionStorage.getItem("timer") || timer);
          } catch (error) {
            console.error("Could not resend OTP:", error);
            // errorMsg.textContent = "Could not resend OTP. Try again later.";
            Swal.fire({
                title: "Error",
                text: data.message,
                // text: "Could not resend OTP. Please try again later.",
                icon: "error",
              });
          }
        });

        // Start countdown on page load
        startResendCountdown(sessionStorage.getItem("timer") || timer);
      });
    </script>
  </body>
</html>
